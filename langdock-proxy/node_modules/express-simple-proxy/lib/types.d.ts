import { Request, Response, NextFunction } from 'express';
import { Readable } from 'stream';
import { AxiosResponse } from 'axios';
export interface ProxyConfig {
    baseURL: string;
    headers: (req: Request) => Record<string, string>;
    timeout?: number;
    responseHeaders?: (response: AxiosResponse) => Record<string, string>;
    errorHandler?: ErrorHandler;
    errorHandlerHook?: ErrorHandlerHook;
}
export interface ProxyError extends Error {
    status?: number;
    code?: string;
    data?: unknown;
    headers?: Record<string, string>;
}
export interface ProxyResponse extends AxiosResponse {
    data: unknown;
    status: number;
    statusText: string;
    headers: Record<string, string>;
}
export interface ProxyRequestPayload {
    url: string;
    method: string;
    headers: Record<string, string>;
    data?: unknown;
    timeout: number;
}
export interface CurlCommandOptions {
    url: string;
    method: string;
    headers: Record<string, string>;
    data?: unknown;
}
export interface RequestWithLocals extends Request {
    locals?: {
        token?: string;
        [key: string]: unknown;
    };
    params: Record<string, string>;
    query: Record<string, string | string[] | undefined>;
    body: Record<string, unknown>;
    method: string;
    path: string;
    is: (type: string) => string | false | null;
}
export type ErrorHandler = (error: ProxyError, req: RequestWithLocals, res: Response) => void | Promise<void>;
export type ErrorHandlerHook = (error: ProxyError, req: RequestWithLocals, res: Response) => ProxyError | Promise<ProxyError>;
export type ResponseHandler = (req: RequestWithLocals, res: Response, remoteResponse: ProxyResponse) => void | Promise<void>;
export type ProxyController = (proxyPath?: string, handler?: ResponseHandler | boolean) => (req: RequestWithFiles, res: Response, next: NextFunction) => Promise<void>;
export interface UrlVariables {
    [key: string]: string | number;
}
export interface QueryParams {
    [key: string]: string | string[] | number | boolean | undefined;
}
export interface FileUpload {
    fieldname: string;
    originalname: string;
    encoding: string;
    mimetype: string;
    buffer: Buffer;
    size: number;
    stream?: Readable | undefined;
    destination?: string;
    filename?: string;
    path?: string;
}
export interface RequestWithFiles extends Omit<RequestWithLocals, 'file' | 'files'> {
    files?: FileUpload[];
    file?: FileUpload;
}
export declare const DEFAULT_TIMEOUT = 30000;
export declare const MAX_REQUEST_SIZE: number;
export declare const DEFAULT_RETRY_COUNT = 2;
//# sourceMappingURL=types.d.ts.map