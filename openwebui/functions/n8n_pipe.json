[{"id":"n8n","user_id":"375d8746-ea55-43be-b16a-fc71d77d3604","name":"N8N","type":"pipe","content":"\"\"\"\ntitle: n8n Pipe Function\nauthor: Cole Medin\nauthor_url: https://www.youtube.com/@ColeMedin\nversion: 0.1.0\n\nThis module defines a Pipe class that utilizes N8N for an Agent\n\"\"\"\n\nfrom typing import Optional, Callable, Awaitable\nfrom pydantic import BaseModel, Field\nimport os\nimport time\nimport requests\n\n\ndef extract_event_info(event_emitter) -> tuple[Optional[str], Optional[str]]:\n    if not event_emitter or not event_emitter.__closure__:\n        return None, None\n    for cell in event_emitter.__closure__:\n        if isinstance(request_info := cell.cell_contents, dict):\n            chat_id = request_info.get(\"chat_id\")\n            message_id = request_info.get(\"message_id\")\n            return chat_id, message_id\n    return None, None\n\n\nclass Pipe:\n    class Valves(BaseModel):\n        n8n_url: str = Field(\n            default=\"https://n8n.[your domain].com/webhook/[your webhook URL]\"\n        )\n        n8n_bearer_token: str = Field(default=\"...\")\n        input_field: str = Field(default=\"chatInput\")\n        response_field: str = Field(default=\"output\")\n        emit_interval: float = Field(\n            default=2.0, description=\"Interval in seconds between status emissions\"\n        )\n        enable_status_indicator: bool = Field(\n            default=True, description=\"Enable or disable status indicator emissions\"\n        )\n\n    def __init__(self):\n        self.type = \"pipe\"\n        self.id = \"n8n_pipe\"\n        self.name = \"N8N Pipe\"\n        self.valves = self.Valves()\n        self.last_emit_time = 0\n        pass\n\n    async def emit_status(\n        self,\n        __event_emitter__: Callable[[dict], Awaitable[None]],\n        level: str,\n        message: str,\n        done: bool,\n    ):\n        current_time = time.time()\n        if (\n            __event_emitter__\n            and self.valves.enable_status_indicator\n            and (\n                current_time - self.last_emit_time >= self.valves.emit_interval or done\n            )\n        ):\n            await __event_emitter__(\n                {\n                    \"type\": \"status\",\n                    \"data\": {\n                        \"status\": \"complete\" if done else \"in_progress\",\n                        \"level\": level,\n                        \"description\": message,\n                        \"done\": done,\n                    },\n                }\n            )\n            self.last_emit_time = current_time\n\n    async def pipe(\n        self,\n        body: dict,\n        __user__: Optional[dict] = None,\n        __event_emitter__: Callable[[dict], Awaitable[None]] = None,\n        __event_call__: Callable[[dict], Awaitable[dict]] = None,\n    ) -> Optional[dict]:\n        await self.emit_status(\n            __event_emitter__, \"info\", \"/Calling N8N Workflow...\", False\n        )\n        chat_id, _ = extract_event_info(__event_emitter__)\n        messages = body.get(\"messages\", [])\n\n        # Verify a message is available\n        if messages:\n            question = messages[-1][\"content\"]\n            try:\n                # Invoke N8N workflow\n                headers = {\n                    \"Authorization\": f\"Bearer {self.valves.n8n_bearer_token}\",\n                    \"Content-Type\": \"application/json\",\n                }\n                payload = {\"sessionId\": f\"{chat_id}\"}\n                payload[self.valves.input_field] = question\n                response = requests.post(\n                    self.valves.n8n_url, json=payload, headers=headers\n                )\n                if response.status_code == 200:\n                    n8n_response = response.json()[self.valves.response_field]\n                else:\n                    raise Exception(f\"Error: {response.status_code} - {response.text}\")\n\n                # Set assitant message with chain reply\n                body[\"messages\"].append({\"role\": \"assistant\", \"content\": n8n_response})\n            except Exception as e:\n                await self.emit_status(\n                    __event_emitter__,\n                    \"error\",\n                    f\"Error during sequence execution: {str(e)}\",\n                    True,\n                )\n                return {\"error\": str(e)}\n        # If no message is available alert user\n        else:\n            await self.emit_status(\n                __event_emitter__,\n                \"error\",\n                \"No messages found in the request body\",\n                True,\n            )\n            body[\"messages\"].append(\n                {\n                    \"role\": \"assistant\",\n                    \"content\": \"No messages found in the request body\",\n                }\n            )\n\n        await self.emit_status(__event_emitter__, \"info\", \"Complete\", True)\n        return n8n_response\n","meta":{"description":"Pipe to access n8n workflows","manifest":{"title":"n8n Pipe Function","author":"Cole Medin","author_url":"https://www.youtube.com/@ColeMedin","version":"0.1.0"}},"is_active":false,"is_global":false,"updated_at":1752669880,"created_at":1752669880}]